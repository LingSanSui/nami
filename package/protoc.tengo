os := import("os")
fmt := import("fmt")
text := import("text")
nami := import("nami")
json := import("json")

b := nami.sh1("curl", "-L", "https://api.github.com/repos/protocolbuffers/protobuf/releases/latest")
if is_error(b) {
    fmt.println(b)
    os.exit(1)
}
v := json.decode(b).tag_name
err := nami.write_file(text.join([nami.cache_dir, "version"], os.path_separator), v)
if is_error(err) {
    fmt.println(err)
    os.exit(1)
}

if nami.os == "darwin" {
    if err := nami.sh("which", "unzip"); is_error(err){
        fmt.println("Please install unzip first, such as on Ubuntu: $ sudo apt-get install unzip")
        os.exit(1)
    }
    if nami.arch == "arm64" {
        fmt.println("There is no arm64 version, will download amd64 version for you!")
    }
    err := nami.sh("curl", "-L", "--progress-bar", "https://github.com/protocolbuffers/protobuf/releases/latest/download/protoc-"+v[1:]+"-osx-x86_64.zip", "-o", text.join([nami.tmp_dir, "_.zip"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
    nami.sh("rm", "-rf", text.join([nami.tmp_dir, "_"], os.path_separator))
    nami.sh("mkdir", text.join([nami.tmp_dir, "_"], os.path_separator))
    nami.sh("unzip", text.join([nami.tmp_dir, "_.zip"], os.path_separator), "-d", text.join([nami.tmp_dir, "_"], os.path_separator))
    nami.sh("mv", text.join([nami.tmp_dir, "_", "bin", "protoc"], os.path_separator), text.join([nami.cache_dir, "protoc"], os.path_separator))
}
if nami.os == "linux" && nami.arch == "amd64" {
    if err := nami.sh("which", "unzip"); is_error(err){
        fmt.println("Please install unzip first, such as on Ubuntu: $ sudo apt-get install unzip")
        os.exit(1)
    }
    err := nami.sh("curl", "-L", "--progress-bar", "https://github.com/protocolbuffers/protobuf/releases/latest/download/protoc-"+v[1:]+"-linux-x86_64.zip", "-o", text.join([nami.tmp_dir, "_.zip"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
    nami.sh("rm", "-rf", text.join([nami.tmp_dir, "_"], os.path_separator))
    nami.sh("mkdir", text.join([nami.tmp_dir, "_"], os.path_separator))
    nami.sh("unzip", text.join([nami.tmp_dir, "_.zip"], os.path_separator), "-d", text.join([nami.tmp_dir, "_"], os.path_separator))
    nami.sh("mv", text.join([nami.tmp_dir, "_", "bin", "protoc"], os.path_separator), text.join([nami.cache_dir, "protoc"], os.path_separator))
}
if nami.os == "windows" && nami.arch == "amd64" {
    if err := nami.sh("which", "unzip"); is_error(err){
        fmt.println("Please install unzip first, such as on Ubuntu: $ sudo apt-get install unzip")
        os.exit(1)
    }
    err := nami.sh("curl", "-L", "--progress-bar", "https://github.com/protocolbuffers/protobuf/releases/latest/download/protoc-"+v[1:]+"-win64.zip", "-o", text.join([nami.tmp_dir, "_.zip"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
    nami.sh("rm", "-rf", text.join([nami.tmp_dir, "_"], os.path_separator))
    nami.sh("mkdir", text.join([nami.tmp_dir, "_"], os.path_separator))
    nami.sh("unzip", text.join([nami.tmp_dir, "_.zip"], os.path_separator), "-d", text.join([nami.tmp_dir, "_"], os.path_separator))
    nami.sh("mv", text.join([nami.tmp_dir, "_", "bin", "protoc.exe"], os.path_separator), text.join([nami.cache_dir, "protoc.exe"], os.path_separator))
}

