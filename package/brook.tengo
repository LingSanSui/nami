os := import("os")
fmt := import("fmt")
text := import("text")
nami := import("nami")
json := import("json")
enum := import("enum")

b := nami.sh1(`curl`, `-L`, `https://api.github.com/repos/txthinking/brook/releases/latest`)
if is_error(b) {
    fmt.println(b)
    os.exit(1)
}
v := json.decode(b).tag_name
err := nami.write_file(text.join([nami.cache_dir, "version"], os.path_separator), v)
if is_error(err) {
    fmt.println(err)
    os.exit(1)
}

got := false
if nami.os == "darwin" && nami.arch == "arm64" {
    got = true
    err := nami.sh(`curl`, `-L`, `--progress-bar`, `https://github.com/txthinking/brook/releases/latest/download/brook_darwin_arm64`, `-o`, text.join([nami.cache_dir, "brook"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
}
if nami.os == "darwin" && nami.arch == "amd64" {
    got = true
    err := nami.sh(`curl`, `-L`, `--progress-bar`, `https://github.com/txthinking/brook/releases/latest/download/brook_darwin_amd64`, `-o`, text.join([nami.cache_dir, "brook"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
}
if nami.os == "windows" && nami.arch == "amd64" {
    got = true
    err := nami.sh(`curl`, `-L`, `--progress-bar`, `https://github.com/txthinking/brook/releases/latest/download/brook_windows_amd64.exe`, `-o`, text.join([nami.cache_dir, "brook.exe"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
}
if nami.os == "linux" && (nami.arch == "amd64" || nami.arch == "arm64") {
    got = true
	i := []
	c := []
    joker := nami.sh1("which", "joker")
    if joker != "" {
        s := nami.sh1("joker", "list")
		l := text.split(s, "\n")
		for v in l {
			l1 := text.re_split(`\s+`, text.trim_space(v), -1)
			if is_error(l1) || len(l1) < 5 {
				continue
			}
			if !text.has_suffix(l1[4], "brook") {
				continue
			}
			i = append(i, l1[0])
			c = append(c, text.join(enum.map(l1[4:], func(_, v){return "'"+v+"'"}), " "))
		}
		for v in i {
			_ := nami.sh("joker", "stop", v)
		}
		err := nami.sh("sleep", "3")
		if is_error(err) {
			fmt.println(err)
			os.exit(1)
		}
    }
    if nami.arch == "amd64" {
        err := nami.sh(`curl`, `-L`, `--progress-bar`, `https://github.com/txthinking/brook/releases/latest/download/brook_linux_amd64`, `-o`, text.join([nami.cache_dir, "brook"], os.path_separator))
        if is_error(err) {
            fmt.println(err)
            os.exit(1)
        }
    }
    if nami.arch == "arm64" {
        err := nami.sh(`curl`, `-L`, `--progress-bar`, `https://github.com/txthinking/brook/releases/latest/download/brook_linux_arm64`, `-o`, text.join([nami.cache_dir, "brook"], os.path_separator))
        if is_error(err) {
            fmt.println(err)
            os.exit(1)
        }
    }
	err := nami.sh("cp", text.join([nami.cache_dir, "brook"], os.path_separator), text.join([nami.bin_dir, "brook"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
	err = nami.sh("cp", text.join([nami.cache_dir, "brook"], os.path_separator), text.join([nami.copied_dir, "brook"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
	err = nami.sh("chmod", "+x", text.join([nami.bin_dir, "brook"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
	if joker != "" {
		for v in c {
			err := nami.sh("sh", "-c", "joker " + v)
			if is_error(err) {
				fmt.println(err)
				os.exit(1)
			}
		}
	}
}
if !got {
    fmt.println("brook does not support your OS or Arch now. PR welcome: https://github.com/txthinking/nami/blob/master/package")
    os.exit(1)
}

if (nami.os == "linux" || nami.os == "darwin") && (nami.arch == "amd64" || nami.arch == "arm64") && text.contains(os.getenv("SHELL"), "bash") {
    err := nami.sh("chmod", "+x", text.join([nami.cache_dir, "brook"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }

    err = nami.sh1(text.join([nami.cache_dir, "brook"], os.path_separator), `completion`, `--file`, text.join([nami.cache_dir, "_brook_autocomplete"], os.path_separator))
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
    file := text.join([nami.home_dir, ".bashrc"], os.path_separator)
    if nami.os == "darwin" {
        file = text.join([nami.home_dir, ".bash_profile"], os.path_separator)
    }
    if !text.contains(string(os.read_file(file)), "_brook_autocomplete") {
        err = nami.append_file(file, "source "+text.join([nami.bin_dir, "_brook_autocomplete"], os.path_separator) +"\n")
        if is_error(err) {
            fmt.println(err)
            os.exit(1)
        }
    }
    fmt.println("You may need to restart shell for auto-completion:")
    fmt.println("\t$ exec -l $SHELL")

    err = nami.sh(text.join([nami.cache_dir, "brook"], os.path_separator), `manpage`, `--file`, `/tmp/brook.1`)
    if is_error(err) {
        fmt.println(err)
        os.exit(1)
    }
    if nami.os == "linux" {
        fmt.println("You may need to copy brook man page:")
        fmt.println("\t$ cp /tmp/brook.1 /path/to/man/man1/brook.1")
    }
    if nami.os == "darwin" {
        fmt.println("You may need to copy brook man page:")
        fmt.println("\t$ cp /tmp/brook.1 /usr/local/share/man/man1/brook.1")
    }
}
